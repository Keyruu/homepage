---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Header from "../components/Header.astro";
import TableOfContents from "../components/TableOfContents.astro";

interface Props {
  post: CollectionEntry<"blog">["data"];
  headings: import("astro").MarkdownHeading[];
  readingTime: String
}

const { post, headings, readingTime } = Astro.props as Props;
---

<html lang="en">
  <head>
    <BaseHead title={post.title} description={post.description} />
    <style>
      main {
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 100%;
        margin: 0 auto;
        width: calc(100% - 2em);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-light));
        position: relative;
      }
      .toc-container {
        position: fixed;
        top: 1rem;
        margin-left: 60rem;
        margin-top: 10rem;
        width: 250px;
        max-height: 90vh;
        overflow-y: auto;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: var(--box-shadow);
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <div class="toc-container">
        <TableOfContents headings={headings} />
      </div>
      <article class="prose">
        <section>
          <div class="title">
            <div class="date">
              <FormattedDate date={post.pubDate} /> â€¢ {readingTime}
              {
                post.updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={post.updatedDate} />
                  </div>
                )
              }
            </div>
            <h1 id="title">{post.title}</h1>
            <hr />
          </div>
        </section>
        <slot />
      </article>
    </main>
    <Footer />
    <script>
      const linkStarts = new WeakMap();
      const linkEnds = new WeakMap();
      let lastArrowPosition = { x: 0, y: 0 };

      addIntersectionObserver();
      addResizeObserver();

      function addIntersectionObserver() {
        const observer = new IntersectionObserver((sections) => {
          sections.forEach((section) => {
            const heading = section.target.querySelector("h1, h2, h3, h4");
            if (!heading) return;
            const id = heading.getAttribute("id");

            // Get the link to this section's heading
            const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
            if (!link) return;

            // Add/remove the .active class based on whether the
            // section is visible
            const addRemove = section.intersectionRatio > 0 ? "add" : "remove";
            link.classList[addRemove]("active");
          });
          updatePath();
        });

        // Observe all the sections of the article
        document.querySelectorAll("article section").forEach((section) => {
          observer.observe(section);
        });
      }

      function addResizeObserver() {
        if (!document.querySelector("nav.toc")) return;
        const observer = new ResizeObserver(() => {
          drawPath();
          updatePath();
        });
        observer.observe(document.querySelector("nav.toc")!);
      }

      function drawPath() {
        const path = document.querySelector(
          "path.toc-marker"
        )! as SVGPathElement;
        const links = Array.from(document.querySelectorAll("nav.toc a"));
        if (!links.length) return;

        // Start with an empty array of path data values (joined with
        // spaces later)
        let pathData = [];
        let left = 0; // The last x position / indentation

        // Iterate over each link to build up the pathData
        links.forEach((el, i) => {
          const link = el as HTMLElement;
          const x = link.offsetLeft;
          const y = link.offsetTop;
          const height = link.offsetHeight - 1;
          if (i === 0) {
            // The top of the first link starts at 0px along the path.
            linkStarts.set(link, 0);
            // Like drawing with a pen...
            // 'M'ove to the top left of the first link,
            // and then draw a 'L'ine to the bottom left
            pathData.push("M", x, y, "L", x, y + height);
          } else {
            // If the current link is indented differently than the last,
            // then come down to the current link's top before moving
            // left or right. This ensures we get 90-degrees angle at the
            // corners.
            if (left !== x) pathData.push("L", left, y);

            // Draw a line to the top left of the current link
            pathData.push("L", x, y);

            // Apply the current path data to the path element
            path.setAttribute("d", pathData.join(" "));

            // Get the total length of the path now that it extends
            // to the top of this link, and store it in our linkStarts
            // WeakMap.
            linkStarts.set(link, path.getTotalLength());

            // Draw a line to the bottom left of the current link
            pathData.push("L", x, y + height);
          }

          // Save the current link's x position to compare with the next
          // link
          left = x;

          // Apply the current path data to the path element again
          path.setAttribute("d", pathData.join(" "));

          // Get the length of the path that now extends to the
          // bottom of this link, and store it in our linkEnds WeakMap.
          linkEnds.set(link, path.getTotalLength());
        });
      }

      function updatePath() {
        const path = document.querySelector(
          "path.toc-marker"
        )! as SVGPathElement;
        const arrowhead = document.querySelector(".toc-arrowhead")! as SVGPolygonElement;
        const pathLength = path.getTotalLength();
        const activeLinks = document.querySelectorAll("nav.toc a.active");
        const allLinks = document.querySelectorAll("nav.toc a");

        let linkStart = pathLength;
        let linkEnd = 0;
        activeLinks.forEach((link) => {
          // Set linkStart to the top of the earliest active link
          linkStart = Math.min(linkStart, linkStarts.get(link));
          // Set linkEnd to the bottom of the furthest active link
          linkEnd = Math.max(linkEnd, linkEnds.get(link));
        });
        // If there are no active links, hide the path
        // path.style.display = activeLinks.length ? "inline" : "none";
        if (!activeLinks.length) {
          path.style.display = "none";
          arrowhead.style.display = "none";
          return;
        }

        path.style.display = "inline";
        arrowhead.style.display = "inline";
        // FINALLY, do the thing!
        path.setAttribute(
          "stroke-dasharray",
          `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`
        );

        if (Array.from(activeLinks).includes(allLinks[allLinks.length - 1])) {
          // Hide arrowhead when at the last heading
          arrowhead.style.opacity = "0";
          return;
        }

        const endPoint = path.getPointAtLength(linkEnd);
        const beforeEndPoint = path.getPointAtLength(Math.max(0, linkEnd - 1));
        
        // Check if the x position changed significantly (horizontal movement)
        const xDistance = Math.abs(endPoint.x - lastArrowPosition.x);
        
        if (xDistance > 0) { // Threshold for horizontal movement (adjust as needed)
          // Fade out, move, then fade in
          arrowhead.style.opacity = "0";

          const angle = Math.atan2(endPoint.y - beforeEndPoint.y, endPoint.x - beforeEndPoint.x) * 180 / Math.PI;
          arrowhead.setAttribute("transform", `translate(${endPoint.x - 5}, ${endPoint.y - 5}) rotate(${angle} 5 5)`);
          
          setTimeout(() => {
            arrowhead.style.opacity = "1";
            lastArrowPosition = { x: endPoint.x, y: endPoint.y };
          }, 500);
        } else {
          // Vertical movement only, animate normally
          const angle = Math.atan2(endPoint.y - beforeEndPoint.y, endPoint.x - beforeEndPoint.x) * 180 / Math.PI;
          arrowhead.setAttribute("transform", `translate(${endPoint.x - 5}, ${endPoint.y - 5}) rotate(${angle} 5 5)`);
          lastArrowPosition = { x: endPoint.x, y: endPoint.y };
        }

        // Position the arrowhead at the end of the visible portion
        // const endPoint = path.getPointAtLength(linkEnd);
        // const beforeEndPoint = path.getPointAtLength(Math.max(0, linkEnd - 1));
        //
        // // Calculate angle for the arrowhead
        // // const angle = Math.atan2(endPoint.y - beforeEndPoint.y, endPoint.x - beforeEndPoint.x) * 180 / Math.PI;
        //
        // // Position and rotate the arrowhead
        // // arrowhead.setAttribute("transform", `translate(${endPoint.x - 5}, ${endPoint.y - 5}) rotate(${angle} 5 5)`);
        //
        // // Always fade out briefly during any transition
        // arrowhead.style.opacity = "0";
        //
        // setTimeout(() => {
        //   const angle = Math.atan2(endPoint.y - beforeEndPoint.y, endPoint.x - beforeEndPoint.x) * 180 / Math.PI;
        //   arrowhead.setAttribute("transform", `translate(${endPoint.x - 5}, ${endPoint.y - 5}) rotate(${angle} 5 5)`);
        //   arrowhead.style.opacity = "1";
        // }, 200);
      }
    </script>
  </body>
</html>
